/*//////////////////////////////////////////////////////////////////////////////////////////////////////

  1.一阶数据相关:第I条指令的源操作寄存器与第[I-1]条指令（即上一条指令）
  的（EX冒险）目标寄存器相重，导致的数据相关称之为一阶数据相关。
  
	
	  2.解决方法：数据转发（forwarding unit）
	  
		3.转发条件：
		a. Mem 级指令是写操作，即RegWrite_mem =1;
		b. Mem 级指令写回的目标寄存器不是$0,即RegWriteAddr_mem !=0;
		c. Mem 级指令写回的目标寄存器与在EX 级指令的源寄存器是同一寄存器，
		即RegWriteAddr_mem = RsAddr_ex  或者 RegWriteAddr_mem = RtAddr_ex.
		
//////////////////////////////////////////////////////////////////////////////////////////////////*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

void	CreateR_R();
void	CreateR_I();
void	CreateR_R_And_R_I();
void	CreateR_I_And_R_R();
void	CreateLoad_And_R_R();
void	Load_Select(int a);
void	CreateLoad_And_R_I();
void	CreateR_I_And_Store();
void	Store_Select(int a);
void	CreateR_R_And_Store();



struct  Load_Parameter
{
	char Load_type[4];
	int  count;
	int  base;
};

Load_Parameter  Load_parameter;



struct  Store_Parameter
{
	char Store_type[3];
	int  count;
};

Store_Parameter  Store_parameter;


///  防止地址越界
int		count_B=0;
int		count_H=0;
int		count_W=0;

int		count_store_B=0;
int		count_store_H=100;
int		count_store_W=200;

////////   这是R_R 型指令，
char string_R_R [16][5] ={"add","addu","and","nor","or","slt","sltu","sub","subu","xor", //前十个的指令格式是add   rd,rs,rt
"sllv","srav","srlv",//中间三条指令的格式是 sllv  rd,rt,rs
"sll","sra","srl"};//最后三条指令的格式是  sll  rd,rt,s


////////   这是R_I型指令， 指令格式是如 addi rt,rs,immediate
char string_R_I [7][6] = {"addi","addiu","andi","ori","slti","sltiu","xori"};

////////   这是Load型指令
char  string_Load [6][4] ={"lb","lbu","lh","lhu","lw","lui"};


///////    这是Store型指令
char  string_Store [3][3] ={"sb","sh","sw"};


//将编号为10—29的寄存器保留，使用rand()函数来随机抽取其中的一个作为一级数据相关的寄存器
int	 a[25]={10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29};


//   6,7,8,9    编号为6—9的寄存器保留，用作基址寄存器
int  base[3]={6,7,8};
int  store_base=9;



//////////////////////////////////////////////////////////////////////////////////////////////////////

//CreatConflicts 函数将上述指令两两组合形成一级数据相关冲突对。

//////////////////////////////////////////////////////////////////////////////////////////////////////
void CreateConflicts()
{
	
	CreateR_R();
	CreateR_I();
	CreateR_R_And_R_I();
	CreateR_I_And_R_R();
	CreateLoad_And_R_R();
	CreateLoad_And_R_I();
	CreateR_I_And_Store();
	CreateR_R_And_Store();
	
	
	
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

// 主函数main

/////////////////////////////////////////////////////////////////////////////////////////////////////

int main ()
{
	
	CreateConflicts();
	return 0;
}





////////////////////////////////////////////////////////////////////////////////////////////////////

//   生成R_R 型指令冲突对的函数CreateR_R()

////////////////////////////////////////////////////////////////////////////////////////////////////

void CreateR_R()
{
	int		rd1,rs1,rt1;
	int		rd2,rs2=-1,rt2;
	int		s1,s2 ;				//移位指令时用到的偏移量
	int		i,j,k,m=2;			
	int		flag1=1;
	
	FILE *p = fopen("R_R.txt","w");
	
	//为了简化，将第一条指令的rs指定为2号寄存器，rt指定为3号寄存器
	//为了简化，将第二条指令的rt指定为4号寄存器，rd指定为5号寄存器
	rs1=2;
	rt1=3;
	rt2=4;
	rd2=5;
	
	s1=3; //偏移量赋初值
	s2=5;
	
	srand((unsigned)time (NULL));
	
	
	//对2,3,4,5号寄存器赋初值
	fprintf(p,"  .text\n");
	
	fprintf(p,"ori $2, $0, 12\n");
	fprintf(p,"ori $3, $0, 0x1234\n");
	fprintf(p,"ori $4, $0, 0x3456\n");
	fprintf(p,"ori $5, $0, 0x4567\n");
	
	///////////////////////////////////////////////////////////////////////////////
	//R_R型指令两两组合
	///////////////////////////////////////////////////////////////////////////////
	for ( i=0;i<16;i++)
	{	for(j=0;j<16;j++)
	{
		k=rand()%8;
		if(k==0)  {k=k+7;}
		//	rd1=rs2=a[k];
		
		
		
		///////////////////////////////////////////////////////////////////////
		// 1.第一条指令的判断，对i 进行讨论,当第一条指令为sll,sra,srl
		///////////////////////////////////////////////////////////////////////
		
		if(i==13 || i==14 || i==15)  
		{	
			rd1=a[k];
			
			if(j==13 || j==14  ||  j==15)//当第二条指令为sll,sra,srl
			{
				fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [i],rd1,rt1,s1);
				rt2=a[k]; 
				fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [j],rd2,rt2,s2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rt2=4;
			}
			else if(j==10 || j==11  || j==12)//当第二条指令为sllv,srav,srlv
			{
				while(m>0)
				{
					if(m==2)//冲突在第二条指令的rt上
					{
						fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [i],rd1,rt1,s1);
						rt2=a[k]; rs2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
						flag1=0;
					}
					
					if(flag1==0)//冲突在第二条指令的rs上
					{
						fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [i],rd1,rt1,s1);
						rs2=a[k]; rt2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
					}
					
					flag1=1;
					
				}
				
				m=2; // 跳出while循环
				
			}
			
			else //第二条指令为正常的R_R型指令，如add  rd,rs,rt
			{
				while(m>0)
				{
					if(m==2)//冲突出现在第二条指令的rs上
					{
						fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [i],rd1,rt1,s1);
						rs2=a[k]; rt2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
						flag1=0;
					}
					
					if(flag1==0)//冲突出现在第二条指令的rt上
					{
						fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [i],rd1,rt1,s1);
						rs2=4; rt2=a[k];
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
					}
					
					flag1=1;
					
				}
				
				m=2;
			}
		}
		
		
		/////////////////////////////////////////////////////////////////////////
		// 2.第一条指令的判断，对i进行讨论,当第一条指令为sllv,srav,srlv
		/////////////////////////////////////////////////////////////////////////
		
		else  if(i==10 || i==11 || i==12)
		{	
			rd1=a[k];
			
			if(j==13 || j==14  ||  j==15)//第二条指令是sll,sra,srl
			{
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rt1,rs1);
				rt2=a[k]; 
				fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [j],rd2,rt2,s2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rt2=4;
			}
			else if(j==10 || j==11  || j==12)//第二条指令是sllv,srav,srlv
			{
				while(m>0)
				{
					if(m==2)//第二条指令的rt冲突
					{
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rt1,rs1);
						rt2=a[k]; rs2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
						flag1=0;
					}
					
					if(flag1==0)//第二条指令的rs冲突
					{
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rt1,rs1);
						rs2=a[k]; rt2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
					}
					
					flag1=1;
					
				}
				m=2;
				
			}
			
			else //第二条指令为正常的R_R型指令，如add  rd,rs,rt
			{
				while(m>0)
				{
					if(m==2)//冲突出现在第二条指令的rs上
					{
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rt1,rs1);
						rs2=a[k]; rt2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
						flag1=0;
					}
					
					if(flag1==0)//冲突出现在第二条指令的rt上
					{
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rt1,rs1);
						rs2=4; rt2=a[k];
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
					}
					
					flag1=1;
					
				}
				
				m=2;
			}
			
		}
		
		
		
		///////////////////////////////////////////////////////////////////////////////////
		// 3.第一条指令的判断，对i 进行讨论,当第一条指令为正常的R_R型指令，如add  rd,rs,rt
		///////////////////////////////////////////////////////////////////////////////////
		
		else 
		{
			rd1=a[k];
			
			if(j==13 || j==14  ||  j==15)//第二条指令是sll,sra,srl
			{
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rs1,rt1);
				rt2=a[k]; 
				fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [j],rd2,rt2,s2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rt2=4;
			}
			else if(j==10 || j==11  || j==12)//第二条指令是sllv,srav,srlv
			{
				while(m>0)
				{
					if(m==2)//第二条指令的rt冲突
					{
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rs1,rt1);
						rt2=a[k]; rs2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
						flag1=0;
					}
					
					if(flag1==0)//第二条指令的rs冲突
					{
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rs1,rt1);
						rs2=a[k]; rt2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
					}
					
					flag1=1;
					
				}
				m=2;
				
			}
			
			else //第二条指令为正常的R_R型指令，如add  rd,rs,rt
			{
				while(m>0)
				{
					if(m==2)//冲突出现在第二条指令的rs上
					{
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rs1,rt1);
						rs2=a[k]; rt2=4;
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
						flag1=0;
					}
					
					if(flag1==0)//冲突出现在第二条指令的rt上
					{
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rs1,rt1);
						rs2=4; rt2=a[k];
						fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						fprintf(p,"nop\n");
						rs2=-1;
						rt2=4;
						m=m-1;
					}
					
					flag1=1;
					
				}
				
				m=2;
			}
			
			
		}
		
		}
	}
	
	fclose(p);	
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////

////  生成R_I型指令冲突对的函数CreateR_I()

////////////////////////////////////////////////////////////////////////////////////////////////////////
void CreateR_I()
{
	int rt1,rs1,immediate1;
	int rt2,rs2,immediate2;
	int i,j;
	int k;
	
	FILE *p= fopen("R_I.txt","w");
	
	immediate1=28;
	immediate2=39;
	
	rs1=3;
	rt2=4;
	
	rt1=rs2=-1;
	
	srand((unsigned)time (NULL));
	
	
	//对2,3,4,5号寄存器赋初值
	fprintf(p,"  .text\n");
	
	fprintf(p,"ori $3, $0, 0x1234\n");
	fprintf(p,"ori $4, $0, 0x3456\n");
	
	//////////////////////////////////////////////////////////////////////////////////////
	//R_I型指令两两组合
	//////////////////////////////////////////////////////////////////////////////////////
	for(i=0;i<7;i++)
	{	
		for(j=0;j<7;j++)
		{
			k=rand()%5;
			if(k==0)  {k=k+6;}
			
			rt1=rs2=a[k];
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [j],rt2,rs2,immediate2);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			rt1=rs2=-1;
			
		}
		
	}
	
	fclose(p);
}




/////////////////////////////////////////////////////////////////////////////////////////////////////////

////  生成R_R型指令和R_I型指令混合冲突对的函数CreateR_R_And_R_I()

/////////////////////////////////////////////////////////////////////////////////////////////////////////
void CreateR_R_And_R_I()
{
	int rt1,rs1,rd1,immediate1;
	int rt2,rs2,rd2,immediate2;
	int s1,s2;
	int i,j;
	int k;
	
	FILE *p= fopen("R_R_And_R_I.txt","w");
	
	immediate1=424;
	immediate2=269;
	
	rs1=3;
	rt1=4;
	rd2=5;
	rt2=2;
	
	rd1=rs2=-1;
	
	s1=12;
	s2=10;
	
	srand((unsigned)time (NULL));
	
	
	//对2,3,4,5号寄存器赋初值
	fprintf(p,"  .text\n");
	fprintf(p,"ori $2, $0, 0x110\n");
	fprintf(p,"ori $3, $0, 0x1234\n");
	fprintf(p,"ori $4, $0, 0x120\n");
	fprintf(p,"ori $5, $0, 0x3242\n");
	////////////////////////////////////////////////////////////////////////////
	//R_R型指令和R_I型指令两两组合
	////////////////////////////////////////////////////////////////////////////
	for(i=0;i<16;i++)
	{	for(j=0;j<7;j++)
	{
		k=rand()%9;
		if(k==0) {k=k+9;}
		rd1=rs2=a[k];
		
		if(i==13 || i==14 || i==15)//R_R型指令是sll,sra,srl
		{
			
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [i],rd1,rt1,s1);
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [j],rt2,rs2,immediate2);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			
		}
		
		else if(i==10 || i==11 || i==12)//R_R型指令是sllv,srav,srlv
		{
			fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rt1,rs1);
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [j],rt2,rs2,immediate2);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			
		}
		
		else//R_R型指令是正常的，如add rd,rs,rt
		{
			fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rs1,rt1);
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [j],rt2,rs2,immediate2);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			
		}
	}
	}
	
	fclose(p);
}





/////////////////////////////////////////////////////////////////////////////////////////////////////////

////  生成R_I型指令和R_R型指令混合冲突对的函数CreateR_I_And_R_R()

/////////////////////////////////////////////////////////////////////////////////////////////////////////
void CreateR_I_And_R_R()
{
	int rt1,rs1,rd1,immediate1;
	int rt2,rs2,rd2;
	int s1,s2;
	int i,j;
	int k;
	int flag=1;
	
	FILE *p= fopen("R_I_And_R_R.txt","w");
	
	immediate1=445;
	
	
	rs1=3;
	rs2=4;
	rd2=5;
	rt2=2;
	
	rd1=-1;
	
	s1=16;
	s2=8;
	
	srand((unsigned)time (NULL));
	
	
	//对2,3,4,5号寄存器赋初值
	fprintf(p,"  .text\n");
	fprintf(p,"ori $2, $0, 0x1130\n");
	fprintf(p,"ori $3, $0, 0x1534\n");
	fprintf(p,"ori $4, $0, 0x1210\n");
	fprintf(p,"ori $5, $0, 0x3242\n");
	////////////////////////////////////////////////////////////////////////////
	//R_I型指令和R_R型指令两两组合
	////////////////////////////////////////////////////////////////////////////
	for(i=0;i<7;i++)
	{	for(j=0;j<16;j++)
	{
		k=rand()%7;
		if(k==0) {k=k+9;}
		
		rt1=a[k];
		
		if(j==13 || j==14 || j==15)//R_R型指令是sll,sra,srl
		{
			rt2=a[k];
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [j],rd2,rt2,s2);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			rt2=2;
			
		}
		
		else if(j==10 || j==11 || j==12)//R_R型指令是sllv,srav,srlv
		{
			if(flag==1)
			{
				rt2=a[k];
				fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rt2=2;
				flag=0;
			}
			
			if(flag==0)
			{
				rs2=a[k];
				fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rs2=4;
				flag=1;
			}
			
		}
		
		else//R_R型指令是正常的，如add rd,rs,rt
		{
			if(flag==1)
			{
				rs2=a[k];
				fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rs2=4;
				flag=0;
			}
			
			if(flag==0)
			{
				rt2=a[k];
				fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rt2=2;
				flag=1;	
			}
			
		}
	}
	}
	
	fclose(p);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////

////  生成Load型指令和R_R型指令混合冲突对的函数CreateLoad_And_R_R()

/////////////////////////////////////////////////////////////////////////////////////////////////////////
void CreateLoad_And_R_R()
{
	int rt1,immediate1;
	int rt2,rs2,rd2;
	int s2;
	int i,j;
	int k;
	int flag=1;
	
	
	FILE *p= fopen("Load_And_R_R.txt","w");
	
	immediate1=110;
	
	rt2=5;
	rs2=4;
	rd2=2;
	
	s2=13;
	
	srand((unsigned)time (NULL));
	
	
	//对2,4,5,6,7,8号寄存器赋初值
	fprintf(p,"  .text\n");
	fprintf(p,"ori $2, $0, 0x1111\n");
	fprintf(p,"ori $4, $0, 0x1212\n");
	fprintf(p,"ori $5, $0, 0x3222\n");
	
	fprintf(p,"ori $6, $0, 0\n");
	fprintf(p,"ori $7, $0, 100\n");
	fprintf(p,"ori $8, $0, 400\n");
	////////////////////////////////////////////////////////////////////////////
	//Load型指令和R_R型指令两两组合
	////////////////////////////////////////////////////////////////////////////
	for(i=0;i<6;i++)
	{	for(j=0;j<16;j++)
	{
		k=rand()%8;
		if(k==0) {k=k+8;}
		
		rt1=a[k];
		
		
		if(j==13 || j==14 || j==15  )//R_R型指令是sll,sra,srl
		{
			rt2=a[k];
			if(i==5)
			{
				Load_Select(i);
				fprintf(p,"%s   $%d,0x%x\n",Load_parameter.Load_type,rt1,immediate1);
			}
			
			else
			{
				Load_Select(i);
				fprintf(p,"%s   $%d,%d($%d)\n",Load_parameter.Load_type,rt1,Load_parameter.count,Load_parameter.base);
			}
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [j],rd2,rt2,s2);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			rt2=5;
			
		}
		
		else if(j==10 || j==11 || j==12)//R_R型指令是sllv,srav,srlv
		{
			if(flag==1)
			{
				rt2=a[k];
				if(i==5)
				{
					Load_Select(i);
					fprintf(p,"%s   $%d,0x%x\n",Load_parameter.Load_type,rt1,immediate1);
				}
				else
				{
					Load_Select(i);
					fprintf(p,"%s   $%d,%d($%d)\n",Load_parameter.Load_type,rt1,Load_parameter.count,Load_parameter.base);
				}
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rt2=5;
				flag=0;
			}
			
			
			if(flag==0)
			{
				rs2=a[k];
				if(i==5)
				{
					Load_Select(i);
					fprintf(p,"%s   $%d,0x%x\n",Load_parameter.Load_type,rt1,immediate1);
				}
				else
				{
					Load_Select(i);
					fprintf(p,"%s   $%d,%d($%d)\n",Load_parameter.Load_type,rt1,Load_parameter.count,Load_parameter.base);
				}
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rt2,rs2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rs2=4;
				flag=1;
			}
			
		}
		
		else//R_R型指令是正常的，如add rd,rs,rt
		{
			if(flag==1)
			{
				rs2=a[k];
				if(i==5)
				{
					Load_Select(i);
					fprintf(p,"%s   $%d,0x%x\n",Load_parameter.Load_type,rt1,immediate1);
				}
				else
				{
					Load_Select(i);
					fprintf(p,"%s   $%d,%d($%d)\n",Load_parameter.Load_type,rt1,Load_parameter.count,Load_parameter.base);
				}
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rs2=4;
				flag=0;
			}
			
			if(flag==0)
			{
				rt2=a[k];
				if(i==5)
				{
					Load_Select(i);
					fprintf(p,"%s   $%d,0x%x\n",Load_parameter.Load_type,rt1,immediate1);
				}
				else
				{
					Load_Select(i);
					fprintf(p,"%s   $%d,%d($%d)\n",Load_parameter.Load_type,rt1,Load_parameter.count,Load_parameter.base);
				}
				fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [j],rd2,rs2,rt2);
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				fprintf(p,"nop\n");
				rt2=5;
				flag=1;	
			}
			
		}
		}
	}
	
	fclose(p);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

///   判断Load指令是哪个
///   Load_Select(int a)

/////////////////////////////////////////////////////////////////////////////////////////////////////
void  Load_Select(int a)
{
	int  i;
	i=a;
	
	switch (i)//判断Load指令的类型
	{
				case 0://lb
					{
						if(count_B>=100)
							count_B=0;
						strcpy(Load_parameter.Load_type,string_Load [i]);
						Load_parameter.count=count_B;
						if(i==0 || i==1)
							Load_parameter.base=base[0];
						//	fprintf(p,"%s   $%d,%d($%d)\n",string_Load [i],rt1,count_B,base[0]);
						count_B++;
						break;
					}
				case 1://lbu
					{
						if(count_B>=100)
							count_B=0;
						strcpy(Load_parameter.Load_type,string_Load [i]);
						Load_parameter.count=count_B;
						if(i==0 || i==1)
							Load_parameter.base=base[0];
						//	fprintf(p,"%s   $%d,%d($%d)\n",string_Load [i],rt1,count_B,base[0]);
						count_B++;
						break;
					}
					
				case 2://lh
					{
						if(count_H>=300)
							count_H=0;
						strcpy(Load_parameter.Load_type,string_Load [i]);
						Load_parameter.count=count_H;
						if(i==2 || i==3)
							Load_parameter.base=base[1];
						//	fprintf(p,"%s   $%d,%d($%d)\n",string_Load [i],rt1,count_H,base[1]);
						count_H=count_H+2;
						break;
					}
				case 3://lhu
					{
						if(count_H>=300)
							count_H=0;
						strcpy(Load_parameter.Load_type,string_Load [i]);
						Load_parameter.count=count_H;
						if(i==2 || i==3)
							Load_parameter.base=base[1];
						//	fprintf(p,"%s   $%d,%d($%d)\n",string_Load [i],rt1,count_H,base[1]);
						count_H=count_H+2;
						break;
					}
					
				case 4://lw
					{
						if(count_W>=200)
							count_W=0;
						strcpy(Load_parameter.Load_type,string_Load [i]);
						Load_parameter.count=count_W;
						if(i==4 )
							Load_parameter.base=base[2];
						//	fprintf(p,"%s   $%d,%d($%d)\n",string_Load [i],rt1,count_W,base[2]);
						count_W=count_W+4;
						break;
					}
					
				case 5://lui
					{
						strcpy(Load_parameter.Load_type,string_Load [i]);
						Load_parameter.count=0;
						Load_parameter.base=base[0];
						//		fprintf(p,"%s  $%d,0x%x\n",string_Load [i],rt1,immediate1);
					}
				default: ;
					
	}
	
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////

////  生成Load型指令和R_I型指令混合冲突对的函数CreateLoad_And_R_I()

/////////////////////////////////////////////////////////////////////////////////////////////////////////
void CreateLoad_And_R_I()
{
	int rt1,immediate1;
	int rt2,rs2,immediate2;
	
	int i,j;
	int k;
	int flag=1;
	
	FILE *p= fopen("Load_And_R_I.txt","w");
	
	immediate1=120;
	immediate2=181;
	
	rt2=5;

	
	srand((unsigned)time (NULL));
	
	
	//对4,5,6,7,8号寄存器赋初值
	fprintf(p,"  .text\n");
	
//	fprintf(p,"ori $4, $0, 0x1221\n");
	fprintf(p,"ori $5, $0, 0x3232\n");
	
	fprintf(p,"ori $6, $0, 0\n");
	fprintf(p,"ori $7, $0, 100\n");
	fprintf(p,"ori $8, $0, 400\n");
	////////////////////////////////////////////////////////////////////////////
	//Load型指令和R_I型指令两两组合
	////////////////////////////////////////////////////////////////////////////
	for(i=0;i<6;i++)
	{	for(j=0;j<7;j++)
	{
		k=rand()%10;
		if(k==0) {k=k+8;}
		
		rt1=rs2=a[k];
		
		if(i==5)
		{
			Load_Select(i);
			fprintf(p,"%s   $%d,0x%x\n",Load_parameter.Load_type,rt1,immediate1);
		}
		else
		{
			Load_Select(i);
			fprintf(p,"%s   $%d,%d($%d)\n",Load_parameter.Load_type,rt1,Load_parameter.count,Load_parameter.base);
		}
		
		fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [j],rt2,rs2,immediate2);
		fprintf(p,"nop\n");
		fprintf(p,"nop\n");
		fprintf(p,"nop\n");
	}
	}

	
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////

////   生成R_I型指令和Store型指令的函数CreateR_I_And_Store()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CreateR_I_And_Store()
{
	int rt1,rs1,immediate1;
	int rt2;
	int s1;
	int i,j;
	int k;
	int flag=1;
	
	FILE *p= fopen("R_I_And_Store.txt","w");
	
	immediate1=18;

	rs1=4;
	
	s1=17;
	
	srand((unsigned)time (NULL));
	
	
	//对2,3,4,5号寄存器赋初值
	fprintf(p,"  .text\n");
//	fprintf(p,"ori $2, $0, 0x1130\n");
//	fprintf(p,"ori $3, $0, 0x1534\n");
	fprintf(p,"ori $4, $0, 0x12\n");
	fprintf(p,"ori $9, $0, 600\n");
	////////////////////////////////////////////////////////////////////////////
	//R_I型指令和Store型指令两两组合
	////////////////////////////////////////////////////////////////////////////
	for(i=0;i<7;i++)
	{	for(j=0;j<3;j++)
	{
		k=rand()%10;
		if(k==0) {k=k+7;}
		
		rt1=rt2=a[k];
		
		if(j==0)//sb
		{
			if(count_store_B>=100)
			count_store_B=0;
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
			fprintf(p,"%s  $%d,%d($%d)\n",string_Store [j],rt2,count_store_B,9);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			count_store_B++;
		}
		
		else if( j==1)//SH
		{
			if(count_store_H>=200)
				count_store_H=100;
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
			fprintf(p,"%s  $%d,%d($%d)\n",string_Store [j],rt2,count_store_H,9);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			count_store_H=count_store_H+2;
				
		}
		
		else//SW
		{
			if(count_store_W>=300)
				count_store_W=200;
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_I [i],rt1,rs1,immediate1);
			fprintf(p,"%s  $%d,%d($%d)\n",string_Store [j],rt2,count_store_W,9);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			count_store_W=count_store_W+4;
			
		}
	}
	}
	
	fclose(p);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////

////   生成R_R型指令和Store型指令的函数CreateR_R_And_Store()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CreateR_R_And_Store()
{
	int rt1,rs1,rd1,immediate1;
	int rt2;
	int s1;
	int i,j;
	int k;
	
	FILE *p= fopen("R_R_And_Store.txt","w");
	
	immediate1=467;

	rs1=3;
	rt1=4;

	s1=12;

	srand((unsigned)time (NULL));
	
	
	//对2,3,4,5号寄存器赋初值
	fprintf(p,"  .text\n");

	fprintf(p,"ori $3, $0, 0x1234\n");
	fprintf(p,"ori $4, $0, 0x1200\n");
	fprintf(p,"ori $9, $0, 600\n");

	////////////////////////////////////////////////////////////////////////////
	//R_R型指令和Store型指令两两组合
	////////////////////////////////////////////////////////////////////////////
	for(i=0;i<16;i++)
	{	for(j=0;j<3;j++)
	{
		k=rand()%11;
		if(k==0) {k=k+9;}
		rd1=rt2=a[k];
		
		if(i==13 || i==14 || i==15)//R_R型指令是sll,sra,srl
		{
			
			fprintf(p,"%s  $%d,$%d,0x%x\n",string_R_R [i],rd1,rt1,s1);
			Store_Select(j);
			fprintf(p,"%s  $%d,%d($%d)\n",Store_parameter.Store_type,rt2,Store_parameter.count,9);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			
		}
		
		else if(i==10 || i==11 || i==12)//R_R型指令是sllv,srav,srlv
		{
			fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rt1,rs1);
			Store_Select(j);
			fprintf(p,"%s  $%d,%d($%d)\n",Store_parameter.Store_type,rt2,Store_parameter.count,9);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			
		}
		
		else//R_R型指令是正常的，如add rd,rs,rt
		{
			fprintf(p,"%s  $%d,$%d,$%d\n",string_R_R [i],rd1,rs1,rt1);
			Store_Select(j);
			fprintf(p,"%s  $%d,%d($%d)\n",Store_parameter.Store_type,rt2,Store_parameter.count,9);
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			fprintf(p,"nop\n");
			
		}
	}
	}
	
	fclose(p);

	
}



/////////////////////////////////////////////////////////////////////////////////////////////////////

///////  Store_Select()

/////////////////////////////////////////////////////////////////////////////////////////////////////
void Store_Select(int a)
{
	int j;
	j=a;

	switch(j)
	{
		case 0:
		{
			if(count_store_B>=100)
				count_store_B=0;
			strcpy(Store_parameter.Store_type,string_Store [j]);
			Store_parameter.count=count_store_B;
			count_store_B++;
			break;
		}

		case 1:
			{
			if(count_store_H>=200)
				count_store_H=100;
			strcpy(Store_parameter.Store_type,string_Store [j]);
			Store_parameter.count=count_store_H;
			count_store_H=count_store_H+2;
			break;
			}

		case 2:
			{
			if(count_store_W>=300)
				count_store_W=200;
			strcpy(Store_parameter.Store_type,string_Store [j]);
			Store_parameter.count=count_store_W;
			count_store_W=count_store_W+4;
			break;
			}

		default: ;
	}
	
}